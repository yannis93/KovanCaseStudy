// <auto-generated />
using KovanCaseStudy.Infrastructure.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KovanCaseStudy.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(KovanDbContext))]
    partial class KovanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KovanCaseStudy.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Password = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("KovanCaseStudy.Domain.Aggregates.VehiclesAggregate.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalBooking")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "OS7VA",
                            IsDisabled = true,
                            IsReserved = true,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 8,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = "Q2RLQ",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = "Z2LBF",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = "INZPG",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = "FBGXO",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = "LT3RT",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = "T2ZX9",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = "2NP1R",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = "WZKOU",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = "FV2FO",
                            IsDisabled = false,
                            IsReserved = false,
                            Lat = 39.9244125486328m,
                            Lon = 32.8643810105882m,
                            TotalBooking = 5,
                            VehicleTypeId = 2
                        });
                });

            modelBuilder.Entity("KovanCaseStudy.Domain.Aggregates.VehiclesAggregate.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bike"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Scooter"
                        });
                });

            modelBuilder.Entity("KovanCaseStudy.Domain.Aggregates.VehiclesAggregate.Vehicle", b =>
                {
                    b.HasOne("KovanCaseStudy.Domain.Aggregates.VehiclesAggregate.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });
#pragma warning restore 612, 618
        }
    }
}
